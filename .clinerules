# Cline 的规则与学习记录 (.clinerules)

## 项目: WebChat - 实时聊天应用程序

---

## Memory Bank 操作规则
*   在开始任何任务前必须完整阅读所有 Memory Bank 文件
*   任何重大更改都需要更新相关的 Memory Bank 文件
*   当发现新的系统模式或技术决策时，更新 systemPatterns.md 和 techContext.md
*   在完成功能实现后，及时更新 progress.md 和 activeContext.md

## 代码规范与约定
*   **Java 版本:** 使用 Java 8 或更高版本
*   **编码风格:**
    *   使用清晰的变量和方法命名
    *   为复杂逻辑添加注释
    *   使用适当的异常处理
*   **并发处理:**
    *   使用线程安全的集合（如 ConcurrentHashMap）
    *   正确处理线程同步
    *   避免死锁和竞态条件

## 设计模式与架构规则
*   **消息处理:**
    *   所有客户端-服务器通信通过 Message 对象
    *   严格遵循 MessageType 枚举定义的消息类型
    *   正确使用 sender 和 receiver 字段
*   **错误处理:**
    *   服务器端记录关键操作的日志
    *   向客户端返回友好的错误信息
    *   妥善处理网络异常和连接断开

## 用户体验准则
*   **消息展示:**
    *   区分不同类型的消息（使用颜色或格式）
    *   清晰显示消息发送者
    *   系统消息要醒目但不干扰
*   **命令处理:**
    *   提供直观的命令语法
    *   命令错误时提供有用的提示
    *   确保用户能方便地获取帮助信息

## 项目特定规则
*   阻止用户向自己发送私人消息
*   保持登录流程简单，避免重复输入用户名
*   优雅处理客户端异常退出
*   确保消息正确发送到目标用户

## 源代码文件结构
*   客户端代码位于 src/main/java/com/example/chat/client/
*   服务器代码位于 src/main/java/com/example/chat/server/
*   共用类位于 src/main/java/com/example/chat/common/

## 通信协议规范
*   严格按照定义的 MessageType 使用消息类型
*   确保消息对象的所有必要字段都被正确设置
*   正确处理序列化和反序列化

## 测试准则
*   确保修改不会破坏现有功能
*   测试所有新增功能的正常和异常情况
*   验证消息的正确传递和处理

## 持续改进
*   记录发现的新模式和最佳实践
*   及时更新文档以反映代码变化
*   保持对用户反馈的响应

---

_注: 此文件将随项目进展不断更新，以反映新的学习和发现。_